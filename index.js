class AudioPlayer {
  constructor() {
    this.currentAudio = null;
    this.demoTranscripts = {
      quantum: "Quantum computing is like having a magical computer that can try all possible solutions to a problem at the same time, instead of checking them one by one like regular computers do. This is possible because quantum computers use quantum bits, or 'qubits', which can exist in multiple states simultaneously through a property called superposition. When qubits are entangled, they can share information instantly, allowing quantum computers to perform certain calculations exponentially faster than classical computers.",
      dog: "Yes, golden retrievers are often considered excellent family dogs. They are known for their friendly, gentle, and loyal nature. They tend to get along well with children and other pets, and they generally have a calm and pleasant temperament. They are also intelligent and eager to please, which makes them relatively easy to train. As with any breed, they need proper exercise, socialization, and care to thrive."
    };
    
    this.init();
  }

  init() {
    this.render();
    this.bindEvents();
  }

  render() {
    const app = document.getElementById('app');
    app.innerHTML = `
      <div class="audio-container">
        <div class="header">
          <h1>üéµ Audio Player</h1>
          <p>Play and analyze audio files generated by OpenAI</p>
        </div>

        <div class="upload-section">
          <div class="file-input-wrapper">
            <input type="file" class="file-input" id="audioFile" accept="audio/*">
            <label for="audioFile" class="file-input-button" id="fileButton">
              üìÅ Choose Audio File
            </label>
          </div>
          <div class="error-message" id="errorMessage"></div>
        </div>

        <div class="audio-player" id="audioPlayer">
          <div class="audio-info">
            <div class="audio-title" id="audioTitle">Audio File</div>
            <div class="audio-duration" id="audioDuration">Duration: --:--</div>
          </div>
          <div class="audio-controls">
            <audio controls id="audioElement">
              Your browser does not support the audio element.
            </audio>
          </div>
        </div>

        <div class="transcript-section" id="transcriptSection">
          <div class="transcript-header">üìù Transcript</div>
          <div class="transcript-text" id="transcriptText">
            Upload an audio file to see its content here...
          </div>
        </div>

        <div class="demo-section">
          <button class="demo-button" id="quantumDemo">üî¨ Load Quantum Demo</button>
          <button class="demo-button" id="dogDemo">üêï Load Dog Demo</button>
        </div>
      </div>
    `;
  }

  bindEvents() {
    const audioFile = document.getElementById('audioFile');
    const fileButton = document.getElementById('fileButton');
    const audioElement = document.getElementById('audioElement');

    // File input change
    audioFile.addEventListener('change', (e) => {
      const file = e.target.files[0];
      if (file) {
        this.handleFile(file);
      }
    });

    // Drag and drop events
    fileButton.addEventListener('dragover', (e) => {
      e.preventDefault();
      fileButton.classList.add('drag-over');
    });

    fileButton.addEventListener('dragleave', () => {
      fileButton.classList.remove('drag-over');
    });

    fileButton.addEventListener('drop', (e) => {
      e.preventDefault();
      fileButton.classList.remove('drag-over');
      
      const files = e.dataTransfer.files;
      if (files.length > 0) {
        this.handleFile(files[0]);
      }
    });

    // Demo button events
    const quantumDemo = document.getElementById('quantumDemo');
    const dogDemo = document.getElementById('dogDemo');

    quantumDemo.addEventListener('click', () => {
      this.loadDemo('quantum');
    });

    dogDemo.addEventListener('click', () => {
      this.loadDemo('dog');
    });

    // Audio events
    audioElement.addEventListener('loadedmetadata', () => {
      this.updateDuration();
    });

    audioElement.addEventListener('error', () => {
      this.showError('Error loading audio file. Please check the file format.');
    });
  }

  handleFile(file) {
    if (!file.type.startsWith('audio/')) {
      this.showError('Please select a valid audio file.');
      return;
    }

    this.loadAudioFile(file);
    this.hideMessages();
    this.showSuccess(`Loaded: ${file.name}`);
  }

  loadAudioFile(file) {
    // Clean up previous audio
    if (this.currentAudio) {
      URL.revokeObjectURL(this.currentAudio);
    }

    const url = URL.createObjectURL(file);
    this.currentAudio = url;
    
    const audioElement = document.getElementById('audioElement');
    const audioTitle = document.getElementById('audioTitle');
    const transcriptText = document.getElementById('transcriptText');

    // Set audio source
    audioElement.src = url;
    audioTitle.textContent = file.name;

    // Show placeholder transcript for uploaded files
    transcriptText.textContent = "Transcript not available for uploaded files. This would typically be generated by the OpenAI API during audio creation.";

    this.showAudioPlayer();
  }

  loadDemo(type) {
    const demoFiles = {
      quantum: 'quantum_explanation.wav',
      dog: 'dog.wav'
    };

    const filename = demoFiles[type];
    const transcript = this.demoTranscripts[type];

    const audioElement = document.getElementById('audioElement');
    const audioTitle = document.getElementById('audioTitle');
    const transcriptText = document.getElementById('transcriptText');

    // Clean up previous audio
    if (this.currentAudio) {
      URL.revokeObjectURL(this.currentAudio);
      this.currentAudio = null;
    }

    // Set demo audio
    audioElement.src = filename;
    audioTitle.textContent = filename;
    transcriptText.textContent = transcript;

    // Handle loading error
    audioElement.addEventListener('error', () => {
      this.showError(`Demo file "${filename}" not found. Generate it first by running the Python scripts!`);
    }, { once: true });

    this.showAudioPlayer();
    this.hideMessages();
  }

  showAudioPlayer() {
    const audioPlayer = document.getElementById('audioPlayer');
    const transcriptSection = document.getElementById('transcriptSection');
    
    audioPlayer.classList.add('active');
    transcriptSection.classList.add('active');
  }

  updateDuration() {
    const audioElement = document.getElementById('audioElement');
    const audioDuration = document.getElementById('audioDuration');
    
    if (audioElement.duration) {
      const duration = this.formatTime(audioElement.duration);
      audioDuration.textContent = `Duration: ${duration}`;
    }
  }

  formatTime(seconds) {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  }

  formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  showError(message) {
    const errorMessage = document.getElementById('errorMessage');
    const successMessage = document.getElementById('successMessage');
    
    errorMessage.textContent = message;
    errorMessage.style.display = 'block';
    successMessage.style.display = 'none';
  }

  showSuccess(message) {
    const errorMessage = document.getElementById('errorMessage');
    const successMessage = document.getElementById('successMessage');
    
    successMessage.textContent = message;
    successMessage.style.display = 'block';
    errorMessage.style.display = 'none';
  }

  hideMessages() {
    const errorMessage = document.getElementById('errorMessage');
    const successMessage = document.getElementById('successMessage');
    
    errorMessage.style.display = 'none';
    successMessage.style.display = 'none';
  }
}

// Initialize the audio player when the page loads
const audioPlayer = new AudioPlayer();